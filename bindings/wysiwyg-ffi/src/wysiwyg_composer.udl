// Copyright 2022 The Matrix.org Foundation C.I.C.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace wysiwyg_composer {
    ComposerModel new_composer_model();
};

interface ComposerModel {
    ComposerUpdate set_content_from_html(string html);
    ComposerUpdate set_content_from_markdown(string markdown);
    string get_content_as_html();
    string get_content_as_markdown();
    ComposerUpdate clear();
    ComposerUpdate select(u32 start_utf16_codeunit, u32 end_utf16_codeunit);
    ComposerUpdate replace_text(string new_text);
    ComposerUpdate replace_text_in(string new_text, u32 start, u32 end);
    ComposerUpdate backspace();
    ComposerUpdate delete();
    ComposerUpdate delete_in(u32 start, u32 end);
    ComposerUpdate enter();
    ComposerUpdate bold();
    ComposerUpdate italic();
    ComposerUpdate strike_through();
    ComposerUpdate underline();
    ComposerUpdate inline_code();
    ComposerUpdate ordered_list();
    ComposerUpdate unordered_list();
    ComposerUpdate undo();
    ComposerUpdate redo();
    ComposerUpdate indent();
    ComposerUpdate un_indent();
    ComposerUpdate create_link(string link);
    ComposerUpdate edit_link_with_text(string link, string text);
    ComposerUpdate insert_link_with_text(string link, string text);
    ComposerUpdate remove_links();
    string to_tree();
    ComposerState get_current_dom_state();
    record<ComposerAction, ActionState> action_states();
    LinkAction get_link_action();
};

interface ComposerUpdate {
    TextUpdate text_update();
    MenuState menu_state();
};

dictionary ComposerState {
    sequence<u16> html;
    u32 start;
    u32 end;
};

[Enum]
interface TextUpdate {
    Keep();
    ReplaceAll(
        sequence<u16> replacement_html,
        u32 start_utf16_codeunit,
        u32 end_utf16_codeunit
    );
    Select(
        u32 start_utf16_codeunit,
        u32 end_utf16_codeunit
    );
};

enum ComposerAction {
    "Bold",
    "Italic",
    "StrikeThrough",
    "Underline",
    "InlineCode",
    "Link",
    "Undo",
    "Redo",
    "OrderedList",
    "UnorderedList",
    "Indent",
    "UnIndent",
};

enum ActionState {
    "Enabled",
    "Reversed",
    "Disabled",
};

[Enum]
interface MenuState {
    Keep();
    Update(
        record<ComposerAction, ActionState> action_states
    );
};

[Enum]
interface LinkAction {
    Insert();
    Create();
    Edit(
        string link,
        string text
    );
};
