def commonExcludes = [
        // Bindings
        'uniffi/**/',
]

def unitTestExcludes = [
        // Views
        '**/*View.*',
        '**/*EditText*',
        '**/*TextView*',

        // UI helpers, rendering
        '**/*InterceptInputConnection*',
        '**/*EditorEditTextAttributeReader*',
        '**/internal/view/**/*',
        '**/view/**/*',
]

def instrumentationTestExcludes = []

def initializeReport(report, projects, classExcludes, executionDataPaths) {
    projects.each { project -> project.apply plugin: 'jacoco' }

    report.executionData {
        fileTree(rootProject.rootDir.absolutePath).include(
                *executionDataPaths
        )
    }
    report.reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }

    gradle.projectsEvaluated {
        def androidSourceDirs = []
        def androidClassDirs = []

        projects.each { project ->
            switch (project) {
                case { project.plugins.hasPlugin("com.android.application") }:
                    androidClassDirs.add("${project.buildDir}/tmp/kotlin-classes/debug")
                    androidSourceDirs.add("${project.projectDir}/src/main/kotlin")
                    androidSourceDirs.add("${project.projectDir}/src/main/java")
                    break
                case { project.plugins.hasPlugin("com.android.library") }:
                    androidClassDirs.add("${project.buildDir}/tmp/kotlin-classes/debug")
                    androidSourceDirs.add("${project.projectDir}/src/main/kotlin")
                    androidSourceDirs.add("${project.projectDir}/src/main/java")
                    break
                default:
                    report.sourceSets project.sourceSets.main
            }
        }

        report.sourceDirectories.setFrom(report.sourceDirectories + files(androidSourceDirs))
        def classFiles = androidClassDirs.collect { files(it).files }.flatten()
        report.classDirectories.setFrom(files((report.classDirectories.files + classFiles).collect {
            fileTree(dir: it, excludes: classExcludes)
        }))
    }
}

def collectProjects(predicate) {
    return subprojects.findAll { it.buildFile.isFile() && predicate(it) }
}

task generateCoverageReport(type: JacocoReport) {
    outputs.upToDateWhen { false }
    rootProject.apply plugin: 'jacoco'
    def projects = collectProjects { ['library'].contains(it.name) }
    def executionDataPaths = [
            "**/build/**/*.exec",
            "**/build/outputs/code_coverage/**/coverage.ec",
    ]
    def excludes = commonExcludes
    initializeReport(it, projects, excludes, executionDataPaths)
}

task generateUnitTestCoverageReport(type: JacocoReport) {
    outputs.upToDateWhen { false }
    rootProject.apply plugin: 'jacoco'
    def projects = collectProjects { ['library'].contains(it.name) }
    def executionDataPaths = [
            "**/build/outputs/unit_test_code_coverage/**/*.exec",
    ]
    def excludes = commonExcludes + unitTestExcludes
    initializeReport(it, projects, excludes, executionDataPaths)
}

task generateInstrumentationTestCoverageReport(type: JacocoReport) {
    outputs.upToDateWhen { false }
    rootProject.apply plugin: 'jacoco'
    def projects = collectProjects { ['library'].contains(it.name) }
    def executionDataPaths = [
            "**/build/outputs/code_coverage/*AndroidTest/connected/**/coverage.ec",
    ]
    def excludes = commonExcludes + instrumentationTestExcludes
    initializeReport(it, projects, excludes, executionDataPaths)
}

task unitTestsWithCoverage(type: GradleBuild) {
    startParameter.projectProperties.coverage = "true"
    tasks = [':library:testDebugUnitTest']
}

task instrumentationTestsWithCoverage(type: GradleBuild) {
    startParameter.projectProperties.coverage = "true"
    tasks = [':library:connectedDebugAndroidTest']
}
